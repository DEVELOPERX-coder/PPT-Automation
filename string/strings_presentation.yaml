# Strings in C++ Presentation

variables:
  background_color: [26, 26, 26] # Dark charcoal (#1A1A1A)
  title_color: [0, 255, 255] # Cyan (#00FFFF)
  subtitle_color: [187, 134, 252] # Light Purple (#BB86FC)
  text_color: [224, 224, 224] # Light Gray (#E0E0E0)
  code_color: [3, 218, 198] # Light Green (#03DAC6)
  accent_color: [0, 191, 255] # Light Blue (#00BFFF)
  highlight_color: [255, 140, 0] # Orange (#FF8C00)
  dark_gray: [45, 45, 45] # Dark Gray (#2D2D2D)
  very_dark_gray: [37, 37, 37] # Very Dark Gray (#252525)

settings:
  style:
    title_font: "Segoe UI Light"
    title_size: 44
    body_font: "Segoe UI"
    body_size: 20
    theme_color: [0, 191, 255] # Light Blue

slides:
  # Slide 1: Title Slide
  - type: title_slide
    title: "ðŸš€ STRINGS IN C++"
    subtitle: "Arrays With Character(s) #DSAin45 - Day 4"

  # Slide 2: What Are Strings?
  - type: title_and_content
    title: "What Exactly ARE Strings?"
    content: "At their core, strings are sequences of characters. But in C++, there are two main ways to represent them:"

  # Slide 3: C-style Strings
  - type: title_and_content
    title: "1. C-style Strings (char arrays)"
    content: |
      ```cpp
      char greeting[] = "Hello"; // Compiler adds null terminator '\0'
      ```

      Memory layout:
      [H][e][l][l][o][\0]

      That \0 at the end is the null terminator - it tells functions where the string ends.

      Key characteristics:
      â€¢ Fixed size determined at declaration
      â€¢ Contiguous memory
      â€¢ Relies on null terminator to determine end
      â€¢ Prone to buffer overflows

  # Slide 4: C++ std::string
  - type: title_and_content
    title: "2. C++ std::string"
    content: |
      ```cpp
      std::string greeting = "Hello";
      ```

      Under the hood, std::string is a class that manages:
      â€¢ A dynamically allocated character array
      â€¢ Size tracking
      â€¢ Memory management
      â€¢ Various utility methods

      _If C-style strings are a manual typewriter, std::string is a modern word processor with spell-check, auto-save, and therapy built in._

  # Slide 5: String Memory Layout
  - type: section
    title: "String Memory Layout"

  # Slide 6: C-style String Memory
  - type: title_and_content
    title: "C-style String Memory:"
    content: |
      â€¢ Fixed size determined at declaration
      â€¢ Contiguous memory
      â€¢ Relies on null terminator to determine end
      â€¢ Prone to buffer overflows

      Memory representation:
      [H][e][l][l][o][\0][X][Y]
      0x100 0x101 0x102 0x103 0x104 0x105 0x106 0x107

      Buffer overflow happens when we write past the end of the allocated memory!

  # Slide 7: std::string Memory
  - type: title_and_content
    title: "std::string Memory:"
    content: |
      â€¢ Often uses Small String Optimization (SSO)
      â€¢ Small strings (<15 chars) stored directly in object
      â€¢ Larger strings stored in dynamically allocated memory
      â€¢ Tracks both size and capacity

      _Small String Optimization is like keeping a small shopping list in your pocket vs. having to go home to get your big shopping list from the fridge._

  # Slide 8: Operations & Complexity Table
  - type: section
    title: "String Operations & Complexity"

  # Slide 9: Complexity Table
  - type: title_only
    title: "String Operations & Complexity"
    elements:
      - type: text_box
        left: 0.5
        top: 1.5
        width: 10
        height: 6
        text: |
          | Operation      | C-style                | std::string            | Notes                          |
          |---------------|------------------------|------------------------|--------------------------------|
          | Create        | O(n)                   | O(n)                   | Both copy characters           |
          | Length        | O(n)                   | O(1)                   | std::string tracks size        |
          | Concatenate   | O(n+m)                 | O(n+m)                 | Both need to copy characters   |
          | Compare       | O(n)                   | O(n)                   | Character-by-character         |
          | Access        | O(1)                   | O(1)                   | Direct array access            |
          | Find          | O(n*m)                 | O(n*m)                 | Linear search                  |
          | Insert        | O(n) + Manual resizing | O(n)                   | std::string handles resizing   |
          | Erase         | O(n) + Manual shifting | O(n)                   | std::string handles shifting   |

          _A programmer's evolution: First you love strings, then you hate them, then you understand them, and finally you accept that they'll always be a source of bugs regardless._
        font: "Consolas"
        size: 16

  # Slide 10: String Manipulation Techniques
  - type: section
    title: "String Manipulation Techniques"

  # Slide 11: String Traversal
  - type: title_and_content
    title: "1. String Traversal"
    content: |
      **For C-style strings:**
      ```cpp
      char str[] = "Hello";
      for (int i = 0; str[i] != '\0'; i++) {
          char c = str[i];
          // Process character c
      }
      ```

      **For std::string:**
      ```cpp
      std::string str = "Hello";
      for (char c : str) {
          // Process character c
      }
      ```

      Characters: [H] [e] [l] [l] [o]

  # Slide 12: String Transformation
  - type: title_and_content
    title: "2. String Transformation"
    content: |
      **Case conversion:**
      ```cpp
      std::string str = "Hello";
      std::transform(str.begin(), str.end(), 
                    str.begin(), ::toupper);
      // Result: "HELLO"
      ```

      **Substring extraction:**
      ```cpp
      std::string str = "Hello World";
      std::string sub = str.substr(6, 5);
      // Result: "World"
      ```
